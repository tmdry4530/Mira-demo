---
description: api-specification
globs: 
alwaysApply: false
---
# Mira 합의메커니즘 웹앱 - API 명세서

## 📋 개요

이 룰은 Mira 웹앱의 API 엔드포인트 명세를 정의합니다.

**참조 룰**: 
- [mira-prd.mdc](mdc:.cursor/rules/mira-prd.mdc) - 사용자 여정 및 기능 요구사항
- [system-architecture.mdc](mdc:.cursor/rules/system-architecture.mdc) - API 계층 설계

## 🔗 API 엔드포인트 명세

### 1. 질문 검증 API

| 항목 | 내용 |
|---|---|
| **엔드포인트 URL** | `/api/question` |
| **HTTP 메서드** | `POST` |
| **요청 파라미터** | `question` (string, required) - 사용자 질문 |
| **요청 예시** | `{ "question": "토끼에 대해 알려줘" }` |
| **응답 구조** | `{ "success": true, "questionId": "uuid", "message": "질문이 검증되었습니다" }` |

### 2. AI 답변 생성 API

| 항목 | 내용 |
|---|---|
| **엔드포인트 URL** | `/api/generate` |
| **HTTP 메서드** | `POST` |
| **요청 파라미터** | `questionId` (string, required) - 질문 ID |
| **요청 예시** | `{ "questionId": "uuid" }` |
| **응답 구조** | `{ "success": true, "answer": "토끼는 포유동물로...", "answerId": "uuid" }` |

### 3. 명제 분할 API

| 항목 | 내용 |
|---|---|
| **엔드포인트 URL** | `/api/split` |
| **HTTP 메서드** | `POST` |
| **요청 파라미터** | `answerId` (string, required) - 답변 ID |
| **요청 예시** | `{ "answerId": "uuid" }` |
| **응답 구조** | `{ "success": true, "propositions": ["토끼는 포유동물이다", "토끼는 빠르게 달릴 수 있다"], "splitId": "uuid" }` |

### 4. 검증 실행 API (16개 검증자)

| 항목 | 내용 |
|---|---|
| **엔드포인트 URL** | `/api/verify-v2` |
| **HTTP 메서드** | `POST` |
| **요청 파라미터** | `splitId` (string, required) - 분할 ID |
| **요청 예시** | `{ "splitId": "uuid" }` |
| **응답 구조** | `{ "success": true, "verificationId": "uuid", "status": "started" }` |
| **검증자 구성** | 16개 검증자 (4x4 그리드): 논리/사실/맥락/종합 검증자 각 4개씩 |
| **Rate Limiting** | 분당 12개 요청 제한, 2개씩 배치 처리, 6초 간격 |

### 5. 합의 결과 API (16개 검증자 기준)

| 항목 | 내용 |
|---|---|
| **엔드포인트 URL** | `/api/consensus` |
| **HTTP 메서드** | `GET` |
| **요청 파라미터** | `verificationId` (string, required) - 검증 ID |
| **요청 예시** | `/api/consensus?verificationId=uuid` |
| **응답 구조** | `{ "success": true, "results": [{ "proposition": "토끼는 포유동물이다", "votes": { "true": 10, "false": 6 }, "consensus": "true" }], "summary": { "total": 4, "true": 3, "false": 1 } }` |
| **합의 기준** | 16개 중 과반수(9개 이상) 판정 |

### 6. 실시간 진행률 API

| 항목 | 내용 |
|---|---|
| **엔드포인트 URL** | `/api/progress` |
| **HTTP 메서드** | `GET` |
| **요청 파라미터** | `verificationId` (string, required) - 검증 ID |
| **요청 예시** | `/api/progress?verificationId=uuid` |
| **응답 구조** | `{ "success": true, "progress": 75, "currentStep": "verification", "completedValidators": 12, "totalValidators": 16 }` |

## 🔧 API 오류 해결 사항

### 엔드포인트 라우팅 수정
- **문제**: `/api/verify` 엔드포인트로 잘못 요청하여 404 오류 발생
- **해결**: 프론트엔드에서 `/api/verify-v2` 엔드포인트로 정확히 요청하도록 수정
- **영향**: VerificationProcessV2 컴포넌트에서 올바른 백엔드 엔드포인트 호출

### Rate Limiting 최적화
- **무료 티어 제한**: Gemini API 분당 15개 요청 제한
- **해결 방안**: 
  - 분당 12개 요청으로 여유를 둠
  - 배치 크기를 8개에서 2개로 축소
  - 배치 간 대기 시간을 1.5초에서 6초로 증가
  - 각 요청 간 2초 대기 추가
  - 429 오류 시 45초 대기 후 재시도

### Gemini 모델 업그레이드
- **기존**: `gemini-2.0-flash-lite`
- **변경**: `gemini-2.5-flash-lite-preview-06-17`
- **장점**: 비용 효율성과 저지연 최적화, 높은 처리량 지원

## 🎯 16개 검증자 시스템

### 검증자 구성
```
논리 검증자 (4개) | 사실 검증자 (4개)
맥락 검증자 (4개) | 종합 검증자 (4개)
```

### 진행률 계산
- **총 단계**: 16개 검증자 검증
- **진행률**: (완료된 검증자 수 / 16) × 100
- **실시간 업데이트**: WebSocket/SSE를 통한 즉시 업데이트

### 합의 메커니즘
- **판정 기준**: 16개 중 과반수(9개 이상) 동의
- **결과 표시**: 각 명제별 찬성/반대 투표수와 최종 판정
- **신뢰도**: 검증자별 신뢰도 점수 표시

